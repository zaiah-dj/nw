Wed Jan 10 19:30:20 EST 2018
	 -After a very long hiatus dealing with networking, I've finally come back to make it work without excess dependencies.
	 -The solution was to extract the needed functionality from single.[ch] and build it into the library.  A better way to handle this would be to use native networking code.

Sat Feb  4 04:03:01 EST 2017
	 -Updated nw.h to make defines a little clearer.
	 -Reorganized nw.c to make all code a bit cleaner.
	 -Added error indicator to Recvr structure.  This enables nw to send a message using either the currently chosen buffer or the fixed buffer called 'error'.

Fri Jan 27 17:18:21 EST 2017
	 -Tested POSTs of 100KB+.  Will try larger tests and more memory.  This works great!  150 at a time worked smoothly.

Fri Jan 27 12:49:38 EST 2017
	 -Added some new #define flags.  NW_QUEUE_* will allow nw to hold as many requests in queue as possible.  This is only for testing, but its been instrumental in getting to the next steps.
	 -Tested with 1000 108 byte GET requests.  Haven't seen a crash or memory mismatch.  Also compiled with clang's super strict warnings and haven't had any real issues.
	 -Fixed buffer library.  On bf_free(), size, written and error were not being reset to zero.  Caused some problems but we're good now.
	 -NW_QUEUE_WRITES needs some work.

Fri Jan 27 00:17:30 EST 2017
	 -Fixed bug in main loop.  Was initializing poll structures out of order.  
	 -This caused malloc'd memory for responses and requests to point to the wrong structure. (so fd 3's memory might really be fd 4's memory and in some cases fd 4's memory wasn't initialized)

Sat Jan 21 05:03:20 EST 2017
	 -A lot of this log is missing.  I will go back and find those notes....
	 -Switching most of the backend to start using nw_add, nw_read and nw_write.  These serve as bounds checking functions to add to buffers.

Sun Oct 16 12:16:40 EDT 2016
	 -Fixed a few errors in nw.  Was sending WAY too much data when trying to ship packets via write().
	 -Added reset_recvr() to ameliorate tearing down sockets.   It does not close the file descriptor, it just wipes buffers and resets any counts.
	 -Moved around data structures and defines to make the code easier to parse.a
	 -Added reset_recvr() before handlers on all error codes (I'm probably going to get rid of this,  it makes little sense...)
	 -(specifically because the handler should be in control of ALL of that)
	 -Added an event handler for accept().  It's there, but has to be enabled.   This should help block bullshit requests before they even make it to the processing step.  

Thu Sep 29 17:17:51 EDT 2016
	 -Finished getting basic reads and writes to work.  Have not yet tried retries.
	 -Also noticed some things that a user may ALWAYS want to do: specifically, use memset or some other means to reset the Recvr structure.   If data is kept there, it will throw off subsequent reads and writes (and you'll probably get garbage data or worse, segfault)
	 -Added many useful macros, especially NW_CALL which let's me follow the progression of "important" code by printing it's position and the branch that is being executed. It can be def'd out by leaving -DNW_FOLLOW off of the gcc flags.
	 -I overlooked the nuances of the handle() macro.   I originally only handled failures with this macro, but this didn't work for read, write and process handlers.   uhandle handles callbacks for both failures and successes.  It also uses a different Executor table (please see nw.h for more info on this structure)
	 -Version up (0.2)

Thu Sep 29 02:15:22 EDT 2016
	 -Got through most of the server loop.  Running into some issues with pollfd strucutre references at _write in main.c

Sun Sep 25 14:38:51 EDT 2016
	 -I added a change, lookit me, ma!
